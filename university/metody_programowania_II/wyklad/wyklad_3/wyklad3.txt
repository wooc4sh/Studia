─( 11:25:27 )─< command 0 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if n < x
    then n :: xs
    else x :: insert n xs'
─( 11:25:27 )─< command 0 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if n < x
    then n :: xs
    else x :: insert n xs'

─( 11:25:27 )─< command 0 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if n < x
    then n :: xs
    else x :: insert n xs'

let rec insertion_sort xs =
  match xs with
  | [] -> []
  | x :: xs' -> insert x (insertion_sort xs')
;;
val insert : 'a -> 'a list -> 'a list = <fun>
val insertion_sort : 'a list -> 'a list = <fun>
─( 11:25:27 )─< command 1 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort [1, 5, 3, 7, 0];;
- : (int * int * int * int * int) list = [(1, 5, 3, 7, 0)]
─( 11:25:30 )─< command 2 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort [1; 5; 3; 7; 0];;
- : int list = [0; 1; 3; 5; 7]
─( 11:25:41 )─< command 3 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
─( 11:25:41 )─< command 3 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:41 )─< command 3 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
  let rec insertion_sort_desc xs =
    match xs with
    | [] -> []
    | x :: xs' -> insert_desc x (insertion_sort_desc xs')
  ;;
val insert_desc : 'a -> 'a list -> 'a list = <fun>
val insertion_sort_desc : 'a list -> 'a list = <fun>
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort [1; 5; 3; 7; 0];;
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
│Arg│Array│ArrayLabels│Assert_failure│Atomic│Bigarray│Bool│Buffer│Bytes│BytesLab│
└───┴─────┴───────────┴──────────────┴──────┴────────┴────┴──────┴─────┴────────┘
                                                                                                                                                                                                                                                                                                                                    ─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # 
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
│Arg│Array│ArrayLabels│Assert_failure│Atomic│Bigarray│Bool│Buffer│Bytes│BytesLab│
└───┴─────┴───────────┴──────────────┴──────┴────────┴────┴──────┴─────┴────────┘
                                                                                                                                                                                                                                                                                                                                    ─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_desc n xs =
    match xs with
    | [] -> [n]
    | x :: xs' ->
      if n > x
      then n :: xs
      else x :: insert_desc n xs'
  
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort [1; 5; 3; 7; 0];;
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
│Arg│Array│ArrayLabels│Assert_failure│Atomic│Bigarray│Bool│Buffer│Bytes│BytesLab│
└───┴─────┴───────────┴──────────────┴──────┴────────┴────┴──────┴─────┴────────┘
                                                                                                                                                                                                                                                                                                                                    ─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if n < x
    then n :: xs
    else x :: insert n xs'

─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if n < x
    then n :: xs
    else x :: insert n xs'

─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort [1, 5, 3, 7, 0];;
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
│Arg│Array│ArrayLabels│Assert_failure│Atomic│Bigarray│Bool│Buffer│Bytes│BytesLab│
└───┴─────┴───────────┴──────────────┴──────┴────────┴────┴──────┴─────┴────────┘
                                                                                                                                                                                                                                                                                                                                    
─( 11:25:54 )─< command 4 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort_desc [1; 5; 3; 7; 0];;
- : int list = [7; 5; 3; 1; 0]
─( 11:26:49 )─< command 5 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_gen lt n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if lt n x
    then n :: xs
    else x :: insert_gen n xs'

─( 11:26:49 )─< command 5 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_gen lt n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if lt n x
    then n :: xs
    else x :: insert_gen n xs'

let rec insertion_sort_gen lt xs =
  match xs with
  | [] -> []
  | x :: xs' -> insert_gen lt x (insertion_sort_gen lt xs')
;;
Error: This expression has type 'a but an expression was expected of type
         'a -> 'a -> bool
       The type variable 'a occurs inside 'a -> 'a -> bool
─( 11:26:56 )─< command 6 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_gen lt n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if lt n x
    then n :: xs
    else x :: insert_gen lt n xs'

─( 11:26:56 )─< command 6 >───────────────────────────────────────{ counter: 0 }─
utop # let rec insert_gen lt n xs =
  match xs with
  | [] -> [n]
  | x :: xs' ->
    if lt n x
    then n :: xs
    else x :: insert_gen lt n xs'

let rec insertion_sort_gen lt xs =
  match xs with
  | [] -> []
  | x :: xs' -> insert_gen lt x (insertion_sort_gen lt xs')
;;
val insert_gen : ('a -> 'a -> bool) -> 'a -> 'a list -> 'a list = <fun>
val insertion_sort_gen : ('a -> 'a -> bool) -> 'a list -> 'a list = <fun>
─( 11:29:12 )─< command 7 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort_gen [5; 3; 7; 1; 0; 2];;
Error: This expression should not be a list literal, the expected type is
       'a -> 'a -> bool
─( 11:29:59 )─< command 8 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort_gen (<) [5; 3; 7; 1; 0; 2];;
- : int list = [0; 1; 2; 3; 5; 7]
─( 11:30:50 )─< command 9 >───────────────────────────────────────{ counter: 0 }─
utop # insertion_sort_gen (>) [5; 3; 7; 1; 0; 2];;
- : int list = [7; 5; 3; 2; 1; 0]
─( 11:31:02 )─< command 10 >──────────────────────────────────────{ counter: 0 }─
utop # insertion_sort_gen (<) [1, 5; 4, 3; 4, 7; 1, 1; 0, 0; 3, 2];;
- : (int * int) list = [(0, 0); (1, 1); (1, 5); (3, 2); (4, 3); (4, 7)]
─( 11:31:18 )─< command 11 >──────────────────────────────────────{ counter: 0 }─
utop # (1,2) < (3,4);;
- : bool = true
─( 11:32:09 )─< command 12 >──────────────────────────────────────{ counter: 0 }─
utop # (<);;
- : 'a -> 'a -> bool = <fun>
─( 11:33:04 )─< command 13 >──────────────────────────────────────{ counter: 0 }─
utop # (=);;
- : 'a -> 'a -> bool = <fun>
─( 11:33:14 )─< command 14 >──────────────────────────────────────{ counter: 0 }─
utop # let pair_lex (a1, a2) (b1, b2) =
  if a1 < b1 then true
  else if b1 < a1 then false
  else a2 < b2;;
val pair_lex : 'a * 'b -> 'a * 'b -> bool = <fun>
─( 11:33:19 )─< command 15 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex (1,2) (3,4);;
- : bool = true
─( 11:34:57 )─< command 16 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex (3,4) (1,2);;
- : bool = false
─( 11:35:10 )─< command 17 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex (3,1) (3,2);;
- : bool = true
─( 11:35:15 )─< command 18 >──────────────────────────────────────{ counter: 0 }─
─( 11:35:15 )─< command 18 >──────────────────────────────────────{ counter: 0 }─
utop # let pair_lex_generic lt1 lt2 (a1, a2) (b1, b2) =
  if lt1 a1 b1 then true
  else if lt1 b1 a1 then false
  else lt2 a2 b2
;;
val pair_lex_generic :
  ('a -> 'a -> bool) -> ('b -> 'c -> bool) -> 'a * 'b -> 'a * 'c -> bool =
  <fun>
─( 11:35:21 )─< command 19 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex_generic (<) (>) (1, 2) (1, 3);;
- : bool = false
─( 11:37:37 )─< command 20 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex_generic (<) (>) (1, 4) (1, 3);;
- : bool = true
─( 11:38:59 )─< command 21 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex_generic (<) (>) (1, 4) (2, 3);;
- : bool = true
─( 11:39:09 )─< command 22 >──────────────────────────────────────{ counter: 0 }─
utop # pair_lex_generic (<) (>) (1, 4) (0, 3);;
- : bool = false
─( 11:39:14 )─< command 23 >──────────────────────────────────────{ counter: 0 }─
─( 11:39:14 )─< command 23 >──────────────────────────────────────{ counter: 0 }─
─( 11:39:14 )─< command 23 >──────────────────────────────────────{ counter: 0 }─
─( 11:39:14 )─< command 23 >──────────────────────────────────────{ counter: 0 }─
utop # insertion_sort_gen (pair_lex_generic (<) (>)) [1, 5; 4, 3; 4, 7; 1, 1; 0, 0; 3, 2];;
- : (int * int) list = [(0, 0); (1, 5); (1, 1); (3, 2); (4, 7); (4, 3)]
─( 11:39:18 )─< command 24 >──────────────────────────────────────{ counter: 0 }─
─( 11:39:18 )─< command 24 >──────────────────────────────────────{ counter: 0 }─
utop # 
let add1 x = x + 1

─( 11:39:18 )─< command 24 >──────────────────────────────────────{ counter: 0 }─
utop # 
let add1 x = x + 1

let rec add1_to_all xs =
  match xs with
  | [] -> []
  | x :: xs' -> add1 x :: add1_to_all xs'
;;
val add1 : int -> int = <fun>
val add1_to_all : int list -> int list = <fun>
─( 11:39:39 )─< command 25 >──────────────────────────────────────{ counter: 0 }─
utop # add1_to_all [1;5;3;2];;
- : int list = [2; 6; 4; 3]
─( 11:41:38 )─< command 26 >──────────────────────────────────────{ counter: 0 }─
utop # let rec string_list_of_int_list = function
| [] -> []
| x :: xs' -> string_of_int x :: string_list_of_int_list xs'
;;
val string_list_of_int_list : int list -> string list = <fun>
─( 11:41:45 )─< command 27 >──────────────────────────────────────{ counter: 0 }─
utop # string_list_of_int_list [2;6;4;1;0];;
- : string list = ["2"; "6"; "4"; "1"; "0"]
─( 11:44:49 )─< command 28 >──────────────────────────────────────{ counter: 0 }─
utop # let rec map f = function
| [] -> []
| x :: xs' -> f x :: map f xs'
;;
val map : ('a -> 'b) -> 'a list -> 'b list = <fun>
─( 11:45:02 )─< command 29 >──────────────────────────────────────{ counter: 0 }─
utop # map string_of_int [2;6;4;1;0];;
- : string list = ["2"; "6"; "4"; "1"; "0"]
─( 11:46:01 )─< command 30 >──────────────────────────────────────{ counter: 0 }─
utop # map add1 [2;6;4;1;0];;
- : int list = [3; 7; 5; 2; 1]
─( 11:46:33 )─< command 31 >──────────────────────────────────────{ counter: 0 }─
utop # List.map;;
- : ('a -> 'b) -> 'a list -> 'b list = <fun>
─( 11:46:39 )─< command 32 >──────────────────────────────────────{ counter: 0 }─
utop # map (map string_of_int) [[2];[6,1];[2,4];[1];[0,9]];;
Error: This expression has type 'a * 'b but an expression was expected of type
         int
─( 11:47:14 )─< command 33 >──────────────────────────────────────{ counter: 0 }─
utop # map (map string_of_int) [[2];[6;1];[2;4];[1];[0;9]];;
- : string list list = [["2"]; ["6"; "1"]; ["2"; "4"]; ["1"]; ["0"; "9"]]
─( 11:49:17 )─< command 34 >──────────────────────────────────────{ counter: 0 }─
utop # map (map string_of_int);;
- : int list list -> string list list = <fun>
─( 11:49:24 )─< command 35 >──────────────────────────────────────{ counter: 0 }─
utop # let rec only_positive = function
| [] -> []
| x :: xs -> if x > 0 then x :: only_positive xs else only_positive xs
;;
val only_positive : int list -> int list = <fun>
─( 11:49:39 )─< command 36 >──────────────────────────────────────{ counter: 0 }─
utop # function 1 -> 5 | x -> x + 1;;
- : int -> int = <fun>
─( 11:51:43 )─< command 37 >──────────────────────────────────────{ counter: 0 }─
utop # (function 1 -> 5 | x -> x + 1) 1;;
- : int = 5
─( 11:53:00 )─< command 38 >──────────────────────────────────────{ counter: 0 }─
utop # (function 1 -> 5 | x -> x + 1) 8;;
- : int = 9
─( 11:53:10 )─< command 39 >──────────────────────────────────────{ counter: 0 }─
utop # let rec only_nonempty = function
| [] -> []
| x :: xs -> if x <> [] then x :: only_nonempty xs else only_nonempty xs
;;
val only_nonempty : 'a list list -> 'a list list = <fun>
─( 11:53:13 )─< command 40 >──────────────────────────────────────{ counter: 0 }─
utop # only_nonempty [[3];[1;2];[];[2]];;
- : int list list = [[3]; [1; 2]; [2]]
─( 11:54:38 )─< command 41 >──────────────────────────────────────{ counter: 0 }─
utop # let rec filter p = function
| [] -> []
| x :: xs -> if p x then x :: filter p xs else filter p xs
;;
val filter : ('a -> bool) -> 'a list -> 'a list = <fun>
─( 11:54:56 )─< command 42 >──────────────────────────────────────{ counter: 0 }─
utop # filter (fun x -> x > 0) [5;2;0;1;3];;
- : int list = [5; 2; 1; 3]
─( 11:55:57 )─< command 43 >──────────────────────────────────────{ counter: 0 }─
utop # filter (fun xs -> xs <> []) [[3];[1;2];[];[2]];;
- : int list list = [[3]; [1; 2]; [2]]
─( 11:56:32 )─< command 44 >──────────────────────────────────────{ counter: 0 }─
utop # let rec append xs ys =
  match xs with
  | [] -> ys
  | x :: xs' -> x :: append xs' ys;;
val append : 'a list -> 'a list -> 'a list = <fun>
─( 12:17:43 )─< command 45 >──────────────────────────────────────{ counter: 0 }─
─( 12:17:43 )─< command 45 >──────────────────────────────────────{ counter: 0 }─
utop # 
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
─( 12:17:43 )─< command 45 >──────────────────────────────────────{ counter: 0 }─
utop # let rec fold_right f xs a =
  match xs with
  | []
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
─( 12:17:43 )─< command 45 >──────────────────────────────────────{ counter: 0 }─
utop # let rec fold_right f xs a =
  match xs with
  | [] -> a
  | x :: xs' -> f x (fold_right f xs' a)
;;
┌───────────────────────────────────────────────────────────────────────────────┐
─( 12:17:43 )─< command 45 >──────────────────────────────────────{ counter: 0 }─
utop # let rec fold_right f xs a =
  match xs with
  | [] -> a
  | x :: xs' -> f x (fold_right f xs' a)
;;
val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>
─( 12:17:43 )─< command 46 >──────────────────────────────────────{ counter: 0 }─
utop # 
┌───┬─────┬───────────┬──────────────┬──────┬────────┬────┬──────┬─────┬────────┐
─( 12:21:26 )─< command 46 >──────────────────────────────────────{ counter: 0 }─
utop # let rec fold_right f xs a =
  match xs with
  | [] -> a
  | x :: xs' -> f x (fold_right f xs' a)
;;
val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>
─( 12:21:32 )─< command 47 >──────────────────────────────────────{ counter: 0 }─
utop # let new_append xs ys = fold_right (fun x a -> x :: a) xs ys
let new_append' xs ys = fold_right List.cons xs ys

;;
val new_append : 'a list -> 'a list -> 'a list = <fun>
val new_append' : 'a list -> 'a list -> 'a list = <fun>
─( 12:21:32 )─< command 48 >──────────────────────────────────────{ counter: 0 }─
utop # new_append [1;2] [3;4];;
- : int list = [1; 2; 3; 4]
─( 12:25:00 )─< command 49 >──────────────────────────────────────{ counter: 0 }─
utop # let new_map f xs = fold_right (fun y ys -> f y :: ys) xs []
;;
val new_map : ('a -> 'b) -> 'a list -> 'b list = <fun>
─( 12:25:09 )─< command 50 >──────────────────────────────────────{ counter: 0 }─
utop # new_map add1 [1;2;3];;
- : int list = [2; 3; 4]
─( 12:26:42 )─< command 51 >──────────────────────────────────────{ counter: 0 }─
utop # let new_filter p xs = fold_right (fun y ys -> if p y then y :: ys else ys) xs [];;
val new_filter : ('a -> bool) -> 'a list -> 'a list = <fun>
─( 12:26:48 )─< command 52 >──────────────────────────────────────{ counter: 0 }─
utop # new_filter (fun x -> x > 0) [4;0;2;-4];;
- : int list = [4; 2]
─( 12:28:08 )─< command 53 >──────────────────────────────────────{ counter: 0 }─
utop # fold_right
;;
- : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>
─( 12:28:27 )─< command 54 >──────────────────────────────────────{ counter: 0 }─
utop # let length xs =
  let rec it xs acc =
─( 12:28:27 )─< command 54 >──────────────────────────────────────{ counter: 0 }─
utop # let length xs =
  let rec it xs acc =
    match xs with
    | [] -> acc
    | x :: xs' -> it xs' (acc + 1)
  in it xs 0
;;
val length : 'a list -> int = <fun>
─( 12:29:35 )─< command 55 >──────────────────────────────────────{ counter: 0 }─
utop # length []
;;
- : int = 0
─( 12:32:52 )─< command 56 >──────────────────────────────────────{ counter: 0 }─
utop # length [1;2;3]
;;
- : int = 3
─( 12:32:56 )─< command 57 >──────────────────────────────────────{ counter: 0 }─
utop # let sum xs =
  let rec it xs acc =
─( 12:32:56 )─< command 57 >──────────────────────────────────────{ counter: 0 }─
utop # let sum xs =
  let rec it xs acc =
    match xs with
    | [] -> acc
    | x :: xs' -> it xs' (acc + x)
  in it xs 0
  ;;
val sum : int list -> int = <fun>
─( 12:33:00 )─< command 58 >──────────────────────────────────────{ counter: 0 }─
utop # sum [1;2;3];;
- : int = 6
─( 12:33:43 )─< command 59 >──────────────────────────────────────{ counter: 0 }─
utop # let rev xs =
  let rec it xs acc =
─( 12:33:43 )─< command 59 >──────────────────────────────────────{ counter: 0 }─
utop # let rev xs =
  let rec it xs acc =
    match xs with
    | [] -> acc
    | x :: xs' -> it xs' (x :: acc)
  in it xs []
;;
val rev : 'a list -> 'a list = <fun>
─( 12:33:47 )─< command 60 >──────────────────────────────────────{ counter: 0 }─
utop # rev [1;2;3];;
- : int list = [3; 2; 1]
─( 12:34:35 )─< command 61 >──────────────────────────────────────{ counter: 0 }─
utop # let fold_left f a xs =
  let rec it xs acc =
─( 12:34:35 )─< command 61 >──────────────────────────────────────{ counter: 0 }─
utop # let fold_left f a xs =
  let rec it xs acc =
    match xs with
    | [] -> acc
    | x :: xs' -> it xs' (f acc x)
  in it xs a
;;
val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
─( 12:34:38 )─< command 62 >──────────────────────────────────────{ counter: 0 }─
utop # let new_length xs = fold_left (fun acc y -> acc + 1) 0 xs;;
val new_length : 'a list -> int = <fun>
─( 12:36:10 )─< command 63 >──────────────────────────────────────{ counter: 0 }─
utop # new_length [1;2;3;0];;
- : int = 4
─( 12:37:14 )─< command 64 >──────────────────────────────────────{ counter: 0 }─
utop # let new_sum xs = fold_left (+) 0 xs
;;
val new_sum : int list -> int = <fun>
─( 12:37:24 )─< command 65 >──────────────────────────────────────{ counter: 0 }─
utop # new_sum [1;2;3];;
- : int = 6
─( 12:38:10 )─< command 66 >──────────────────────────────────────{ counter: 0 }─
utop # let new_rev xs = fold_left (fun acc y -> y :: acc) [] xs
;;
val new_rev : 'a list -> 'a list = <fun>
─( 12:38:18 )─< command 67 >──────────────────────────────────────{ counter: 0 }─
utop # new_rev [1;2;3];;
- : int list = [3; 2; 1]
─( 12:39:01 )─< command 68 >──────────────────────────────────────{ counter: 0 }─
utop # fold_left;;
- : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
─( 12:39:13 )─< command 69 >──────────────────────────────────────{ counter: 0 }─
utop # fold_right;;
- : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>
─( 12:39:45 )─< command 70 >──────────────────────────────────────{ counter: 0 }─
utop # fold_left;;
- : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
─( 12:39:45 )─< command 71 >──────────────────────────────────────{ counter: 0 }─
utop # let new_sum' xs = fold_right (+) xs 0
;;
val new_sum' : int list -> int = <fun>
─( 12:39:50 )─< command 72 >──────────────────────────────────────{ counter: 0 }─
utop # new_sum' [1;2;3];;
- : int = 6
─( 12:40:50 )─< command 73 >──────────────────────────────────────{ counter: 0 }─
utop # let new_map' f xs = fold_left (fun ys y -> f y :: ys) [] xs
;;
val new_map' : ('a -> 'b) -> 'a list -> 'b list = <fun>
─( 12:40:54 )─< command 74 >──────────────────────────────────────{ counter: 0 }─
utop # new_map' add1 [1;2;3];;
- : int list = [4; 3; 2]
─( 12:41:59 )─< command 75 >──────────────────────────────────────{ counter: 0 }─
utop # let new_map' f xs = rev (new_map_reversing f xs)
;;
Error: Unbound value new_map_reversing
─( 12:42:25 )─< command 76 >──────────────────────────────────────{ counter: 0 }─
utop # let new_map_reversing f xs = fold_left (fun ys y -> f y :: ys) [] xs

let new_map' f xs = rev (new_map_reversing f xs)
;;
val new_map_reversing : ('a -> 'b) -> 'a list -> 'b list = <fun>
val new_map' : ('a -> 'b) -> 'a list -> 'b list = <fun>
─( 12:43:29 )─< command 77 >──────────────────────────────────────{ counter: 0 }─
utop # nwe_map' add1 [1;2;3];;
Error: Unbound value nwe_map'
Hint: Did you mean new_map'?
─( 12:43:34 )─< command 78 >──────────────────────────────────────{ counter: 0 }─
utop # new_map' add1 [1;2;3];;
- : int list = [2; 3; 4]
─( 12:43:40 )─< command 79 >──────────────────────────────────────{ counter: 0 }─
utop # (|>);;
- : 'a -> ('a -> 'b) -> 'b = <fun>
─( 12:43:44 )─< command 80 >──────────────────────────────────────{ counter: 0 }─
utop # let new_map'' f xs = new_map_reversing f xs |> append
;;
val new_map'' : ('a -> 'b) -> 'a list -> 'b list -> 'b list = <fun>
─( 12:45:39 )─< command 81 >──────────────────────────────────────{ counter: 0 }─
utop # new_map'' add1 [1;2;3];;
- : int list -> int list = <fun>
─( 12:46:32 )─< command 82 >──────────────────────────────────────{ counter: 0 }─
utop # new_map'' add1 [1;2;3] [4;5];;
- : int list = [4; 3; 2; 4; 5]
─( 12:46:47 )─< command 83 >──────────────────────────────────────{ counter: 0 }─
utop # [1;2] = [1;2];;
- : bool = true
─( 12:46:59 )─< command 84 >──────────────────────────────────────{ counter: 0 }─
utop # [1;2] == [1;2];;
- : bool = false
─( 13:00:20 )─< command 85 >──────────────────────────────────────{ counter: 0 }─
utop # let xs = [1;2] in xs == xs;;
- : bool = true
─( 13:01:34 )─< command 86 >──────────────────────────────────────{ counter: 0 }─
utop # type comp = Lt | Eq | Gt
;;
type comp = Lt | Eq | Gt
─( 13:02:36 )─< command 87 >──────────────────────────────────────{ counter: 0 }─
utop # Lt
;;
- : comp = Lt
─( 13:28:26 )─< command 88 >──────────────────────────────────────{ counter: 0 }─
utop # Eq;;
- : comp = Eq
─( 13:28:31 )─< command 89 >──────────────────────────────────────{ counter: 0 }─
utop # Gt;;
- : comp = Gt
─( 13:28:33 )─< command 90 >──────────────────────────────────────{ counter: 0 }─
utop # let compare x y =
  if x < y then Lt
  else if x = y then Eq
  else Gt
;;
val compare : 'a -> 'a -> comp = <fun>
─( 13:28:34 )─< command 91 >──────────────────────────────────────{ counter: 0 }─
utop # compare 1 2
;;
- : comp = Lt
─( 13:29:07 )─< command 92 >──────────────────────────────────────{ counter: 0 }─
utop # compare 2 2;;
- : comp = Eq
─( 13:29:14 )─< command 93 >──────────────────────────────────────{ counter: 0 }─
utop # compare 2 3;;
- : comp = Lt
─( 13:29:18 )─< command 94 >──────────────────────────────────────{ counter: 0 }─
utop # compare 3 2;;
- : comp = Gt
─( 13:29:20 )─< command 95 >──────────────────────────────────────{ counter: 0 }─
utop # match compare 3 2 with Lt -> "lt" | Eq -> "eq" | Gt -> "gt";;
- : string = "gt"
─( 13:29:24 )─< command 96 >──────────────────────────────────────{ counter: 0 }─
utop # Lt = Lt;;
- : bool = true
─( 13:30:04 )─< command 97 >──────────────────────────────────────{ counter: 0 }─
utop # Lt = Gt;;
- : bool = false
─( 13:30:29 )─< command 98 >──────────────────────────────────────{ counter: 0 }─
utop # Lt < Gt;;
- : bool = true
─( 13:30:32 )─< command 99 >──────────────────────────────────────{ counter: 0 }─
utop # Some;;
Error: The constructor Some expects 1 argument(s),
       but is applied here to 0 argument(s)
─( 13:30:36 )─< command 100 >─────────────────────────────────────{ counter: 0 }─
utop # Some 1;;
- : int option = Some 1
─( 13:30:59 )─< command 101 >─────────────────────────────────────{ counter: 0 }─
utop # type int_or_string = Int of int | String of string
;;
type int_or_string = Int of int | String of string
─( 13:31:02 )─< command 102 >─────────────────────────────────────{ counter: 0 }─
utop # Int 1;;
- : int_or_string = Int 1
─( 13:31:43 )─< command 103 >─────────────────────────────────────{ counter: 0 }─
utop # String "foo";;
- : int_or_string = String "foo"
─( 13:31:51 )─< command 104 >─────────────────────────────────────{ counter: 0 }─
utop # let string_of_int_or_string ios =
  match ios with
  | Int i -> string_of_int i
  | String s -> s
;;
val string_of_int_or_string : int_or_string -> string = <fun>
─( 13:31:58 )─< command 105 >─────────────────────────────────────{ counter: 0 }─
utop # string_of_int_or_string (Int 1);;
- : string = "1"
─( 13:32:56 )─< command 106 >─────────────────────────────────────{ counter: 0 }─
utop # string_of_int_or_string (String "foo");;
- : string = "foo"
─( 13:33:13 )─< command 107 >─────────────────────────────────────{ counter: 0 }─
utop # [Int 5; String "bar"];;
- : int_or_string list = [Int 5; String "bar"]
─( 13:33:21 )─< command 108 >─────────────────────────────────────{ counter: 0 }─
utop # map string_of_int_or_string [Int 5; String "bar"];;
- : string list = ["5"; "bar"]
─( 13:33:42 )─< command 109 >─────────────────────────────────────{ counter: 0 }─
utop # fun x xs -> x :: xs;;
- : 'a -> 'a list -> 'a list = <fun>
─( 13:33:58 )─< command 110 >─────────────────────────────────────{ counter: 0 }─
utop # type int_tree = LeafI | NodeI of int_tree * int * int_tree
;;
type int_tree = LeafI | NodeI of int_tree * int * int_tree
─( 13:35:46 )─< command 111 >─────────────────────────────────────{ counter: 0 }─
utop # Node (Leaf 1 (Node Leaf 4 Leaf));;
Error: Syntax error: ')' expected, the highlighted '(' might be unmatched
─( 13:37:25 )─< command 112 >─────────────────────────────────────{ counter: 0 }─
utop # Node (Leaf, 1, Node (Leaf, 4, Leaf));;
Error: Unbound constructor Node
Hint: Did you mean NodeI or None?
─( 13:37:46 )─< command 113 >─────────────────────────────────────{ counter: 0 }─
utop # NodeI (LeafI, 1, NodeI (LeafI, 4, LeafI));;
- : int_tree = NodeI (LeafI, 1, NodeI (LeafI, 4, LeafI))
─( 13:38:09 )─< command 114 >─────────────────────────────────────{ counter: 0 }─
utop # let rec sum_tree t =
  match t with
  | LeafI -> 0
  | NodeI (l, v, r) -> sum_tree l + v + sum_tree r
;;
val sum_tree : int_tree -> int = <fun>
─( 13:38:20 )─< command 115 >─────────────────────────────────────{ counter: 0 }─
utop # NodeI (LeafI, 1, NodeI (LeafI, 4, LeafI)) |> sum_tree;;
- : int = 5
─( 13:39:25 )─< command 116 >─────────────────────────────────────{ counter: 0 }─
utop # fun x xs -> x :: xs;;
- : 'a -> 'a list -> 'a list = <fun>
─( 13:39:40 )─< command 117 >─────────────────────────────────────{ counter: 0 }─
utop # type 'a tree = Leaf | Node of 'a tree * 'a * 'a tree
;;
type 'a tree = Leaf | Node of 'a tree * 'a * 'a tree
─( 13:40:11 )─< command 118 >─────────────────────────────────────{ counter: 0 }─
utop # Node (Leaf, "foo", Leaf);;
- : string tree = Node (Leaf, "foo", Leaf)
─( 13:41:00 )─< command 119 >─────────────────────────────────────{ counter: 0 }─
utop # let rec map_tree f t =
  match t with
  | Leaf -> Leaf
  | Node (l, v, r) -> Node (map_tree f l, f v, map_tree f r)
;;
val map_tree : ('a -> 'b) -> 'a tree -> 'b tree = <fun>
─( 13:41:13 )─< command 120 >─────────────────────────────────────{ counter: 0 }─
utop # map_tree string_of_int (Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf)));;
- : string tree = Node (Node (Leaf, "1", Leaf), "2", Node (Leaf, "3", Leaf))
─( 13:44:00 )─< command 121 >─────────────────────────────────────{ counter: 0 }─
utop # let rec filter p t =
  match t with
  | Leaf -> Leaf
  | Node (l, v, r) ->
      if p v 
      then Node (filter p l, v, filter p r)
      else Leaf 
;;
val filter : ('a -> bool) -> 'a tree -> 'a tree = <fun>
─( 13:45:11 )─< command 122 >─────────────────────────────────────{ counter: 0 }─
utop # let rec filter_tree p t =
  match t with
  | Leaf -> Leaf
  | Node (l, v, r) ->
      if p v 
      then Node (filter_tree p l, v, filter_tree p r)
      else Leaf 
;;
val filter_tree : ('a -> bool) -> 'a tree -> 'a tree = <fun>
─( 13:47:05 )─< command 123 >─────────────────────────────────────{ counter: 0 }─
utop # filter_tree (fun x -> x > 1) (Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf)));;
- : int tree = Node (Leaf, 2, Node (Leaf, 3, Leaf))
─( 13:47:28 )─< command 124 >─────────────────────────────────────{ counter: 0 }─
utop # filter_tree (fun x -> x <> 2) (Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf)));;
- : int tree = Leaf
─( 13:47:53 )─< command 125 >─────────────────────────────────────{ counter: 0 }─
utop # fold_right;;
- : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>
─( 13:48:17 )─< command 126 >─────────────────────────────────────{ counter: 0 }─
utop # let rec fold_tree f a t =
  match t with
  | Leaf -> a
  | Node (l, v, r) -> f (fold_tree f a l) v (fold_tree f a r)
;;
val fold_tree : ('a -> 'b -> 'a -> 'a) -> 'a -> 'b tree -> 'a = <fun>
─( 13:49:34 )─< command 127 >─────────────────────────────────────{ counter: 0 }─
utop # let new_map f t = fold_tree (fun l v r -> Node (l, f v, r)) Leaf t
;;
val new_map : ('a -> 'b) -> 'a tree -> 'b tree = <fun>
─( 13:50:21 )─< command 128 >─────────────────────────────────────{ counter: 0 }─
utop # new_map string_of_int (Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf)));;
- : string tree = Node (Node (Leaf, "1", Leaf), "2", Node (Leaf, "3", Leaf))
─( 13:51:56 )─< command 129 >─────────────────────────────────────{ counter: 0 }─
utop # let sum_tree t = fold_tree (fun l v r -> v + l + r) 0 t
;;
val sum_tree : int tree -> int = <fun>
─( 13:52:16 )─< command 130 >─────────────────────────────────────{ counter: 0 }─
utop # sum_tree (Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf)));;
- : int = 6
─( 13:53:14 )─< command 131 >─────────────────────────────────────{ counter: 0 }─
utop # let contains p t = fold_tree (fun l v r -> p v || l || r) false t
;;
val contains : ('a -> bool) -> 'a tree -> bool = <fun>
─( 13:53:26 )─< command 132 >─────────────────────────────────────{ counter: 0 }─
utop # fold_tree
;;
- : ('a -> 'b -> 'a -> 'a) -> 'a -> 'b tree -> 'a = <fun>
─( 13:55:04 )─< command 133 >─────────────────────────────────────{ counter: 0 }─
utop # let flatten t = fold_tree (fun l v r -> l @ [v] @ r) [] t
;;
val flatten : 'a tree -> 'a list = <fun>
─( 13:55:15 )─< command 134 >─────────────────────────────────────{ counter: 0 }─
utop # flatten (Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf)));;
- : int list = [1; 2; 3]
─( 13:56:32 )─< command 135 >─────────────────────────────────────{ counter: 0 }─
utop # 
Interrupted.
─( 13:56:32 )─< command 135 >─────────────────────────────────────{ counter: 0 }─
utop # let rec find_bst x t =
  match t with
  | Leaf -> false
  | Node (l, v, r) -> 
      if x = v then true
      else if x < v then find_bst x l
      else find_bst x r
;;
val find_bst : 'a -> 'a tree -> bool = <fun>
─( 13:56:57 )─< command 136 >─────────────────────────────────────{ counter: 0 }─
utop # find_bst 1 example_tree;;
Error: Unbound value example_tree
─( 14:00:51 )─< command 137 >─────────────────────────────────────{ counter: 0 }─
utop # let example_tree = Node (Node (Leaf, 1, Leaf), 2, Node(Leaf, 3, Leaf))
;;
val example_tree : int tree =
  Node (Node (Leaf, 1, Leaf), 2, Node (Leaf, 3, Leaf))
─( 14:00:58 )─< command 138 >─────────────────────────────────────{ counter: 0 }─
utop # find_bst 1 example_tree;;
- : bool = true
─( 14:01:01 )─< command 139 >─────────────────────────────────────{ counter: 0 }─
utop # find_bst 2 example_tree;;
- : bool = true
─( 14:01:05 )─< command 140 >─────────────────────────────────────{ counter: 0 }─
utop # find_bst 0 example_tree;;
- : bool = false
─( 14:01:13 )─< command 141 >────────────────────────────────────────────{ counter: 0 }─
utop # 
